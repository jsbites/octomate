{"version":3,"sources":["../lib/octomate.js"],"names":[],"mappings":";;AAiBA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAM,WAAW,gBAAM,SAAN,EAAiB,SAAjB,CAAjB,C;;;;;;;;;;;;;;;;;AACA,IAAM,uBAAuB,gBAA7B;;AAEA,IAAM,mBAAmB,SAAnB,gBAAmB;AAAA,WAAM,IAAI,OAAJ,CAC3B,UAAE,OAAF;AAAA,eACI,sBAAQ,QAAR,EAAkB;AAAA,mBAAM,sBAAQ,QAAR,EAAkB;AAAA,uBAAM,QAAS,IAAT,CAAN;AAAA,aAAlB,CAAN;AAAA,SAAlB,CADJ;AAAA,KAD2B,CAAN;AAAA,CAAzB;;AAKA,IAAM,kBAAkB,SAAlB,eAAkB;AAAA,WAAM,IAAI,OAAJ,CAAa,UAAE,OAAF,EAAW,MAAX,EAAuB;AAC9D,YAAM,MAAM,wBAAO,QAAQ,IAAR,CAAa,KAAb,CAAoB,CAApB,CAAP,EAAiC,CAAjC,CAAoC,CAApC,KAA2C,EAAvD;;AAEA,YAAK,CAAC,GAAN,EAAY;AACR,mBAAQ,EAAE,QAAQ,2BAAV,EAAR;;AAEA;AACH;;AAED,gBAAS,EAAE,QAAF,EAAT;AACH,KAV6B,CAAN;AAAA,CAAxB;;AAYA,IAAM,uBAAuB,SAAvB,oBAAuB;AAAA,QAAI,GAAJ,QAAI,GAAJ;AAAA,WAAe,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV,EAAsB;AAC3E,YAAM,UAAU,0BAAO,KAAP,EAAc,CAAE,OAAF,EAAW,GAAX,CAAd,EAAgC,EAAE,KAAK,QAAP,EAAhC,CAAhB;;AAEA,gBAAQ,MAAR,CAAe,EAAf,CAAmB,MAAnB,EAA2B,UAAE,IAAF;AAAA,mBAAY,UAAE,IAAF;AAAA,uBAAY,oBAAS,IAAT,CAAZ;AAAA,aAAZ;AAAA,SAA3B;AACA,gBAAQ,MAAR,CAAe,EAAf,CAAmB,MAAnB,EAA2B,UAAE,IAAF;AAAA,mBAAY,UAAE,IAAF;AAAA,uBAAY,oBAAS,IAAT,CAAZ;AAAA,aAAZ;AAAA,SAA3B;;AAEA,gBAAQ,EAAR,CAAY,OAAZ,EAAqB,UAAE,IAAF,EAAY;AAC7B,gBAAK,SAAS,CAAd,EAAkB;AACd,wDAA6B,GAA7B,gBAA2C,QAA3C;;AAEA,wBAAS,EAAE,QAAF,EAAT;;AAEA;AACH;;AAED,mBAAQ,EAAE,UAAF,EAAQ,QAAQ,iCAAhB,EAAR;AACH,SAVD;AAWH,KAjB2C,CAAf;AAAA,CAA7B;;AAmBA,IAAM,oBAAoB,SAApB,iBAAoB;AAAA,QAAI,GAAJ,SAAI,GAAJ;AAAA,WAAe,IAAI,OAAJ,CAAa,UAAE,OAAF,EAAW,MAAX,EAAuB;AACzE,YAAM,cAAc,IAAI,KAAJ,CAAW,oBAAX,EAAmC,CAAnC,CAApB;;AAEA,YAAK,CAAC,WAAN,EAAoB;AAChB,mEAA4C,GAA5C;;AAEA,mBAAQ,EAAE,QAAQ,yBAAV,EAAR;;AAEA;AACH;;AAED,YAAM,kBAAkB,gBAAM,QAAN,EAAgB,WAAhB,EAA6B,cAA7B,CAAxB;;AAEA,0BAAU,eAAV,EAA2B,EAAE,UAAU,MAAZ,EAA3B,EAAiD,UAAE,GAAF,EAAO,IAAP,EAAiB;AAC9D,gBAAK,GAAL,EAAW;AACP,8DAAmC,eAAnC;;AAEA,uBAAQ,EAAE,OAAO,GAAT,EAAc,QAAQ,+BAAtB,EAAR;;AAEA;AACH;;AAP6D,8BASpC,KAAK,KAAL,CAAY,IAAZ,CAToC;;AAAA,gBAStD,OATsD,eAStD,OATsD;AAAA,gBAS7C,IAT6C,eAS7C,IAT6C;;;AAW9D,oBAAS,EAAE,gBAAF,EAAW,UAAX,EAAT;AACH,SAZD;AAaH,KA1BwC,CAAf;AAAA,CAA1B;;AA4BA,IAAM,uCAAuC,SAAvC,oCAAuC;AAAA,QAC9B,YAD8B,SACvC,OADuC;AAAA,QAChB,IADgB,SAChB,IADgB;AAAA,WAExC,IAAI,OAAJ,CAAa,UAAE,OAAF,EAAW,MAAX,EAAuB;AACrC,YAAM,SAAS,EAAf;;AAEA,YAAM,UAAU,0BAAO,KAAP,EAAc,CAAE,MAAF,EAAU,IAAV,EAAgB,QAAhB,CAAd,CAAhB;;AAEA,gBAAQ,MAAR,CAAe,EAAf,CAAmB,MAAnB,EAA2B,UAAE,IAAF;AAAA,mBAAY,OAAO,IAAP,CAAa,IAAb,CAAZ;AAAA,SAA3B;;AAEA,gBAAQ,EAAR,CAAY,OAAZ,EAAqB,UAAE,IAAF,EAAY;AAC7B,gBAAK,SAAS,CAAd,EAAkB;AACd,uBAAQ,EAAE,UAAF,EAAQ,QAAQ,+BAAhB,EAAR;;AAEA;AACH;;AAED,gBAAM,UAAU,KAAK,KAAL,CAAY,OAAO,IAAP,CAAa,EAAb,CAAZ,CAAhB;AACA,gBAAM,gBAAgB,QAAQ,QAAR,CAAiB,GAAjB,EAAtB;;AAEA,gBAAK,iBAAiB,aAAtB,EAAsC;AAClC,8BAAK,yDAAL;;AAEA,wBAAS,EAAE,UAAF,EAAQ,MAAM,IAAd,EAAT;;AAEA;AACH;;AAED,oBAAS,EAAE,UAAF,EAAQ,MAAM,KAAd,EAAT;AACH,SAnBD;AAoBH,KA3BI,CAFwC;AAAA,CAA7C;;AA+BA,IAAM,oBAAoB,SAApB,iBAAoB,CAAE,WAAF,EAAe,IAAf,EAAqB,OAArB,EAA8B,MAA9B,EAAsC,IAAtC,EAAgD;AACtE,QAAK,IAAL,EAAY;AACR,yCAAuB,WAAvB,eAA6C,IAA7C;;AAEA,gBAAS,EAAE,UAAF,EAAQ,UAAR,EAAT;;AAEA;AACH;;AAED,QAAM,UAAU,0BAAO,KAAP,EAAc,CAAE,WAAF,CAAd,EAA+B,EAAE,KAAK,gBAAM,QAAN,EAAgB,IAAhB,CAAP,EAA/B,CAAhB;;AAEA,YAAQ,WAAR;AACA,aAAK,SAAL;AACI,6CAAsB,IAAtB;;AAEA;AACJ,aAAK,MAAL;AACI,0CAAmB,IAAnB;;AAEA;AACJ;AACI,8CAAwB,WAAxB,cAA6C,IAA7C;;AAEA;AAZJ;;AAeA,KAAE,QAAQ,MAAV,EAAkB,QAAQ,MAA1B,EACK,GADL,CACU,UAAE,MAAF;AAAA,eAAc,OAAO,EAAP,CAAW,MAAX,EAAmB,UAAE,IAAF;AAAA,mBAAY,oBAAS,IAAT,CAAZ;AAAA,SAAnB,CAAd;AAAA,KADV;;AAGA,YAAQ,EAAR,CAAY,OAAZ,EAAqB,UAAE,IAAF,EAAY;AAC7B,gCAAc,WAAd,4BAAiD,IAAjD;;AAEA,YAAK,SAAS,CAAd,EAAkB;AACd,oBAAS,EAAE,UAAF,EAAQ,UAAR,EAAT;;AAEA;AACH;;AAED,sBAAK,2BAAL;;AAEA,eAAQ,EAAE,UAAF,EAAQ,QAAQ,qBAAhB,EAAR;AACH,KAZD;AAaH,CA1CD;;AA4CA,IAAM,gBAAgB,SAAhB,aAAgB;AAAA,QAAI,IAAJ,SAAI,IAAJ;AAAA,QAAU,IAAV,SAAU,IAAV;AAAA,WAAsB,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV;AAAA,eACrD,kBAAmB,SAAnB,EAA8B,IAA9B,EAAoC,OAApC,EAA6C,MAA7C,EAAqD,IAArD,CADqD;AAAA,KAAb,CAAtB;AAAA,CAAtB;;AAIA,IAAM,aAAa,SAAb,UAAa;AAAA,QAAI,IAAJ,SAAI,IAAJ;AAAA,QAAU,IAAV,SAAU,IAAV;AAAA,WAAsB,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV;AAAA,eAClD,kBAAmB,MAAnB,EAA2B,IAA3B,EAAiC,OAAjC,EAA0C,MAA1C,EAAkD,IAAlD,CADkD;AAAA,KAAb,CAAtB;AAAA,CAAnB;;AAIA,IAAM,gBAAgB,SAAhB,aAAgB;AAAA,QAAI,IAAJ,SAAI,IAAJ;AAAA,QAAU,IAAV,SAAU,IAAV;AAAA,WAAsB,IAAI,OAAJ,CAAa,UAAC,OAAD,EAAU,MAAV;AAAA,eACrD,kBAAmB,SAAnB,EAA8B,IAA9B,EAAoC,OAApC,EAA6C,MAA7C,EAAqD,IAArD,CADqD;AAAA,KAAb,CAAtB;AAAA,CAAtB;;AAIA,mBACK,IADL,CACW,eADX,EAEK,IAFL,CAEW,oBAFX,EAGK,IAHL,CAGW,iBAHX,EAIK,IAJL,CAIW,oCAJX,EAKK,IALL,CAKW,aALX,EAMK,IANL,CAMW,UANX,EAOK,IAPL,CAOW,aAPX,EAQK,IARL,CASQ;AAAA,QAAI,IAAJ,SAAI,IAAJ;AAAA,WAAgB,wDAA6C,IAA7C,QAAhB;AAAA,CATR,EAUQ,UAAE,GAAF,EAAW;AACP,YAAQ,GAAR,CAAa,GAAb;AACA,UAAM,IAAI,KAAJ,CAAW,EAAE,sDAAoD,IAApD,OAAF,EAAX,CAAN;AACD,CAbX","file":"octomate.js","sourcesContent":["/*\n *          __,-“”-.__\n *     |\\  / ,-.  ,-. \\  /|\n *     )o)( ( o )( o ) )(o(\n *    /o/ |  `-'  `-'  | \\o\\\n *    \\ \\/   OctOmate   \\/ /\n *  ~ ~~~~~~~~~~~~~~~~~~~~~~ ~\n *\n * This project is a part of the “Byte-Sized JavaScript” videocast.\n *\n * You can watch “Byte-Sized JavaScript” at: < https://bit.ly/bytesized >\n *\n * MIT Licensed — See LICENSE.md\n *\n * Send your comments, suggestions, and feedback to <me@volkan.io>.\n */\n\nimport { join } from 'path';\nimport remove from 'remove';\nimport mkdirp from 'mkdirp';\nimport parse from 'minimist';\nimport { spawn } from 'child_process';\nimport { log, info, error } from './log';\nimport { readFile } from 'fs';\n\nconst TEMP_DIR = join( __dirname, 'sources' );\nconst PACKAGE_NAME_REG_EXP = /\\/([^/]*)\\.git/;\n\nconst prepareWorkspace = () => new Promise(\n    ( resolve ) =>\n        remove( TEMP_DIR, () => mkdirp( TEMP_DIR, () => resolve( true ) ) )\n);\n\nconst prepareCommands = () => new Promise( ( resolve, reject ) => {\n    const url = parse( process.argv.slice( 2 ) )._[ 0 ] || '';\n\n    if ( !url ) {\n        reject( { reason: 'Please provide a git url.' } );\n\n        return;\n    }\n\n    resolve( { url } );\n} );\n\nconst cloneTheMasterBranch = ( { url } ) => new Promise( (resolve, reject ) => {\n    const command = spawn( 'git', [ 'clone', url ], { cwd: TEMP_DIR } );\n\n    command.stdout.on( 'data', ( data ) => ( data ) => info( `${data}` ) );\n    command.stderr.on( 'data', ( data ) => ( data ) => info( `${data}` ) );\n\n    command.on( 'close', ( code ) => {\n        if ( code === 0 ) {\n            log( `Successfully cloned “${url}” into “${TEMP_DIR}”.` );\n\n            resolve( { url } );\n\n            return;\n        }\n\n        reject( { code, reason: 'Failed to clone the repository.' } );\n    } );\n} );\n\nconst getPackageVersion = ( { url } ) => new Promise( ( resolve, reject ) => {\n    const packageName = url.match( PACKAGE_NAME_REG_EXP )[ 1 ];\n\n    if ( !packageName ) {\n        error( `Cannot find the package name for “${url}”. Exiting.` );\n\n        reject( { reason: 'Package name not found.' } );\n\n        return;\n    }\n\n    const packageFilePath = join( TEMP_DIR, packageName, 'package.json' );\n\n    readFile( packageFilePath, { encoding: 'utf8' }, ( err, data ) => {\n        if ( err ) {\n            error( `Cannot read the file at “${packageFilePath}”. Exiting.` );\n\n            reject( { error: err, reason: 'Cannot read the package file.' } );\n\n            return;\n        }\n\n        const { version, name } = JSON.parse( data );\n\n        resolve( { version, name } );\n    } );\n} );\n\nconst compareLocalVersionAgainstNpmVersion = (\n    { version: localVersion, name }\n) => new Promise( ( resolve, reject ) => {\n    const buffer = [];\n\n    const command = spawn( 'npm', [ 'info', name, '--json' ] );\n\n    command.stdout.on( 'data', ( data ) => buffer.push( data ) );\n\n    command.on( 'close', ( code ) => {\n        if ( code !== 0 ) {\n            reject( { code, reason: 'Failed to execute `npm info`.' } );\n\n            return;\n        }\n\n        const details = JSON.parse( buffer.join( '' ) );\n        const latestVersion = details.versions.pop();\n\n        if ( localVersion === latestVersion ) {\n            log( 'NPM is up-to-date. Skipping the remainder of the tasks.' );\n\n            resolve( { name, skip: true } );\n\n            return;\n        }\n\n        resolve( { name, skip: false } );\n    } );\n} );\n\nconst executeNpmCommand = ( commandName, name, resolve, reject, skip ) => {\n    if ( skip ) {\n        log( `Skipped: \\`npm ${commandName}\\` for “${name}”.` );\n\n        resolve( { name, skip } );\n\n        return;\n    }\n\n    const command = spawn( 'npm', [ commandName ], { cwd: join( TEMP_DIR, name) } );\n\n    switch( commandName ) {\n    case 'install':\n        log( `Will install “${name}”. This might take a while…` );\n\n        break;\n    case 'test':\n        log( `Will test “${name}”. This might take a while…` );\n\n        break;\n    default:\n        log( `Executing \\`npm ${commandName}\\` for ${name}.` );\n\n        break;\n    }\n\n    [ command.stdout, command.stderr ]\n        .map( ( stream ) => stream.on( 'data', ( data ) => info( `${data}` ) ) );\n\n    command.on( 'close', ( code ) => {\n        log( `\\`npm ${commandName}\\` closed with code “${code}”.` );\n\n        if ( code === 0 ) {\n            resolve( { name, skip } );\n\n            return;\n        }\n\n        log( 'Stopping further actions.' );\n\n        reject( { code, reason: 'NPM command failed.' } );\n    } );\n};\n\nconst installModule = ( { name, skip } ) => new Promise( (resolve, reject ) =>\n    executeNpmCommand( 'install', name, resolve, reject, skip )\n);\n\nconst testModule = ( { name, skip } ) => new Promise( (resolve, reject ) =>\n    executeNpmCommand( 'test', name, resolve, reject, skip )\n);\n\nconst publishModule = ( { name, skip } ) => new Promise( (resolve, reject ) =>\n    executeNpmCommand( 'publish', name, resolve, reject, skip )\n);\n\nprepareWorkspace()\n    .then( prepareCommands )\n    .then( cloneTheMasterBranch )\n    .then( getPackageVersion )\n    .then( compareLocalVersionAgainstNpmVersion )\n    .then( installModule )\n    .then( testModule )\n    .then( publishModule )\n    .then(\n        ( { name } ) => log( `Successfully executed all tasks for “${name}”.` ),\n        ( err ) => {\n            console.log( err );\n            throw new Error( { reason: `Failed to execute one or more tasks for “${name}”!` }\n        ) }\n    );\n"]}